name: Reusable workflow for build and deploy

on:
  workflow_call:
    secrets:
      GITLEAKS_LICENSE:
        required: true
      BOT_TOKEN:
        required: true

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
  ECR_REGION: ${{ vars.AWS_ECR_REGION }}

  # IAM for AWS
  AWS_ECR_ROLE: ${{ vars.AWS_ECR_ROLE }}
  AWS_EC2_DEPLOY_ROLE: ${{ vars.AWS_EC2_DEPLOY_ROLE }}
  AWS_K8S_DEPLOY_ROLE: ${{ vars.AWS_K8S_DEPLOY_ROLE }}
  AWS_LAMBDA_DEPLOY_ROLE: ${{ vars.AWS_LAMBDA_DEPLOY_ROLE }}

  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.event.repository.name }}

  ORG_NAME: ${{ github.repository_owner }}

  # deploy buckets
  DEPLOY_BUCKET: ${{ vars.DEPLOY_BUCKET }}
  CONFIG_BUCKET: ${{ vars.CONFIG_BUCKET }}

  # PR Reviewer
  PR_REVIEWERS: ${{ vars.PR_REVIEWERS }}

jobs:
  scan:
    uses: ./.github/workflows/scan.yml
    secrets:
      GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  set-environment:
    needs: [scan]
    runs-on: ${{ vars.RUNNER_NAME || 'ubuntu-latest' }}
    outputs:
      deploy_env: ${{ steps.set-env.outputs.deploy_env }}
      namespace: ${{ steps.set-env.outputs.namespace }}
      release_name: ${{ steps.set-env.outputs.release_name }}
      eks_cluster: ${{ steps.set-env.outputs.eks_cluster }}
      image_name: ${{ steps.set_image_name.outputs.image_name }}
      lambda_function_name: ${{ steps.set-env.outputs.lambda_function_name }}
      aws_region: ${{ steps.set-env.outputs.aws_region }}
    steps:
      - name: Set environment variables
        id: set-env
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          if [[ ${{ github.ref }} == refs/heads/develop ]]; then
            echo "deploy_env=dev" >> $GITHUB_OUTPUT
            echo "namespace=${{ vars.DEV_BASE_NAMESPACE }}" >> $GITHUB_OUTPUT
            echo "release_name=${{ vars.DEV_RELEASE_NAME }}" >> $GITHUB_OUTPUT
            echo "eks_cluster=${{ vars.DEV_CLUSTER }}" >> $GITHUB_OUTPUT
            echo "lambda_function_name=${{ vars.DEV_LAMBDA_FUNCTION_NAME }}" >> $GITHUB_OUTPUT
            echo "aws_region=${{ vars.DEV_AWS_REGION || 'ap-south-1' }}" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == refs/tags/v*.*.*-beta ]]; then
            echo "deploy_env=uat" >> $GITHUB_OUTPUT
            echo "namespace=${{ vars.UAT_BASE_NAMESPACE }}" >> $GITHUB_OUTPUT
            echo "release_name=${{ vars.UAT_RELEASE_NAME }}" >> $GITHUB_OUTPUT
            echo "eks_cluster=${{ vars.UAT_CLUSTER }}" >> $GITHUB_OUTPUT
            echo "lambda_function_name=${{ vars.UAT_LAMBDA_FUNCTION_NAME }}" >> $GITHUB_OUTPUT
            echo "aws_region=${{ vars.UAT_AWS_REGION || 'ap-south-1' }}" >> $GITHUB_OUTPUT
          elif [[ ${{ github.ref }} == refs/tags/v*.*.* || "${{ github.ref }}" == "refs/heads/${DEFAULT_BRANCH}" ]]; then
            echo "deploy_env=prod" >> $GITHUB_OUTPUT
            echo "namespace=${{ vars.PROD_BASE_NAMESPACE }}" >> $GITHUB_OUTPUT
            echo "release_name=${{ vars.PROD_RELEASE_NAME }}" >> $GITHUB_OUTPUT
            echo "eks_cluster=${{ vars.PROD_CLUSTER }}" >> $GITHUB_OUTPUT
            echo "lambda_function_name=${{ vars.PROD_LAMBDA_FUNCTION_NAME }}" >> $GITHUB_OUTPUT
            echo "aws_region=${{ vars.PROD_AWS_REGION || 'ap-southeast-1' }}" >> $GITHUB_OUTPUT
          else
            echo "::error::No branch detected"
            exit 1
          fi
      - name: Set IMAGE_NAME in lowercase
        id: set_image_name
        run: echo "image_name=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

  build:
    needs: [scan, set-environment]
    runs-on: ${{ vars.RUNNER_NAME || 'ubuntu-latest' }}
    if: ${{ vars.DEPLOY_TARGET != 'lambda' }}
    env:
      IMAGE_NAME: ${{ needs.set-environment.outputs.image_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 
        with:
          role-to-assume: ${{ env.AWS_ECR_ROLE }}
          role-session-name: docker-push-session
          aws-region: ${{ env.ECR_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Check Credential
        run: |
          aws sts get-caller-identity

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Check Production Release
        if: startsWith(github.ref, 'refs/tags/v') && !endsWith(github.ref, '-beta')
        run: |
          echo "FROM ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${DOCKER_METADATA_OUTPUT_VERSION}-beta" > ./Dockerfile
          cat ./Dockerfile

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/arm64
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.BOT_TOKEN }}
      - name: Run Trivy vulnerability scanner
        id: scan
        continue-on-error: true
        run: |
          # Install Trivy directly
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${{ vars.TRIVY_VERSION || 'v0.57.0' }}

          # Configure Trivy
          export TRIVY_USERNAME=${{ github.repository_owner }}
          export TRIVY_PASSWORD=${{ secrets.BOT_TOKEN }}
          export GITHUB_TOKEN=${{ secrets.BOT_TOKEN }}

          # Try multiple times with exponential backoff
          for i in {1..5}; do
            echo "Attempt $i to run Trivy scan..."
            
            if trivy image \
              --cache-dir .trivy-cache \
              --format table \
              --ignore-unfixed \
              --output trivy.txt \
              --severity HIGH,CRITICAL \
              --pkg-types os,library \
              '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}'; then
              echo "✅ Trivy scan completed successfully"
              echo "scan_success=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "❌ Attempt $i failed. Waiting before retry..."
              sleep $((2 ** (i - 1)))  # 1s, 2s, 4s, 8s, 16s
            fi
          done

          echo "All retry attempts failed"
          echo "scan_success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Publish Trivy Output to Summary
        run: |
          if [[ -s trivy.txt ]]; then
            cat trivy.txt;
            {
              echo "### Container Scan Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```Result'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi
      - name: Preparing deployment
        id: prepare-deploy
        run: |
          echo "Preparing for deployment"
          echo "build_tag=${DOCKER_METADATA_OUTPUT_VERSION}" >> "$GITHUB_OUTPUT"
      - name: Archive Trivy Result
        uses: actions/upload-artifact@v4
        with:
          name: trivy-result
          path: |
            trivy.txt
    outputs:
      build_tag: ${{ steps.prepare-deploy.outputs.build_tag }}
      scan_success: ${{ steps.scan.outputs.scan_success }}

  deploy:
    needs: [build, set-environment]
    if: |
      always() &&
      (needs.build.result == 'success' || vars.DEPLOY_TARGET == 'lambda')
    runs-on: ${{ vars.RUNNER_NAME || 'ubuntu-latest' }}
    env:
      IMAGE_NAME: ${{ needs.set-environment.outputs.image_name }}
      DEPLOY_ENV: ${{ needs.set-environment.outputs.deploy_env }}
      NAMESPACE: ${{ needs.set-environment.outputs.namespace }}
      RELEASE_NAME: ${{ needs.set-environment.outputs.release_name }}
      EKS_CLUSTER: ${{ needs.set-environment.outputs.eks_cluster }}
      BUILD_TAG: ${{ needs.build.outputs.build_tag }}
      LAMBDA_FUNCTION_NAME: ${{ needs.set-environment.outputs.lambda_function_name }}
      AWS_REGION: ${{ needs.set-environment.outputs.aws_region }}
    outputs:
      deploy_result: ${{ steps.deploy_step.outputs.deploy_result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set uppercase DEPLOY_TARGET
        run: echo "DEPLOY_TARGET_UPPER=$(echo ${{ vars.DEPLOY_TARGET }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env[format('AWS_{0}_DEPLOY_ROLE', env.DEPLOY_TARGET_UPPER)] }}
          role-session-name: ${{ vars.DEPLOY_TARGET }}-deploy-session
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Check Credential
        run: |
          aws sts get-caller-identity

      - name: Set up Python
        if: ${{ vars.DEPLOY_TARGET == 'lambda' }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ vars.PYTHON_VERSION || '3.12' }}

      - name: Configure kubectl
        if: ${{ vars.DEPLOY_TARGET == 'k8s' }}
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER }}

      - name: Deploy
        id: deploy_step
        run: |
          if [[ "${{ vars.DEPLOY_TARGET }}" == "lambda" ]]; then
            LAMBDA_DIR="${{ vars.LAMBDA_PROJECT_DIR }}"
            if [ -z "$LAMBDA_DIR" ]; then
              echo "Error: LAMBDA_PROJECT_DIR is not set"
              exit 1
            fi
            
            cd "$LAMBDA_DIR"
            pip install -r requirements.txt -t package/
            cp lambda_function.py package/
            cd package
            zip -r ../lambda_function.zip .
            cd ..

            FUNCTION_NAME="${{ env.LAMBDA_FUNCTION_NAME }}"
            if [ -z "$FUNCTION_NAME" ]; then
              echo "Error: LAMBDA_FUNCTION_NAME is not set"
              exit 1
            fi

            echo "Updating Lambda function: $FUNCTION_NAME"
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --zip-file fileb://lambda_function.zip

          elif [[ "${{ vars.DEPLOY_TARGET }}" == "ec2" ]]; then
            echo "Downloading ec2 deploy files"
            aws s3 cp s3://${{ env.CONFIG_BUCKET }}/deploy/ec2-deploy.zip ./deploy.zip
            unzip -d ./Deploy deploy.zip && ls -lah ./Deploy

            echo "Making File for CodeDeploy"
            sed -i "/^export PROJECT_URL=/c export PROJECT_URL=${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}" ./Deploy/.deploy_env
            sed -i "/^export REPO=/c export REPO=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" ./Deploy/.deploy_env
            sed -i "/^export TAG=/c export TAG=${{ env.BUILD_TAG }}" ./Deploy/.deploy_env
            sed -i "/^export SVC_NAME=/c export SVC_NAME=${{ env.IMAGE_NAME }}" ./Deploy/.deploy_env
            cat ./Deploy/.deploy_env

            echo "Uploading deploy files to s3..."
            export ZIP_FILE=${{ github.event.repository.name }}-${GITHUB_RUN_ID}.zip
            zip -rj $ZIP_FILE ./Deploy
            aws s3 cp $ZIP_FILE s3://${{ env.DEPLOY_BUCKET }}/
            export ETAG=`aws s3api head-object --bucket ${{ env.DEPLOY_BUCKET }} --key $ZIP_FILE --query 'ETag' --output text`
            echo $ETAG
            echo "Upload done."

            echo "Deployment starting..."
            export NEW_ID=$(aws deploy create-deployment \
            --application-name ${{ vars.CODE_DEPLOY_APP }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.IMAGE_NAME }} \
            --s3-location bucket=${{ env.DEPLOY_BUCKET }},bundleType=zip,eTag=${ETAG},key=$ZIP_FILE --output text)
            aws deploy wait deployment-successful --deployment-id $NEW_ID
            echo "Deployment done."

          elif [[ "${{ vars.DEPLOY_TARGET }}" == "k8s" ]]; then
            echo "Downloading eks deploy files"
            aws s3 cp s3://${{ env.CONFIG_BUCKET }}/deploy/eks-deploy.zip ./deploy.zip
            unzip -d ./helm-charts deploy.zip && ls -lah ./helm-charts

            # Fetch parameters from SSM Parameter Store
            SSM_PARAMS=$(aws ssm get-parameters-by-path --path "/${{ env.ORG_NAME }}/${{ env.IMAGE_NAME }}/${{ env.DEPLOY_ENV }}/" --with-decryption --query 'Parameters[*].{Name: Name, Value: Value}' --output json)
            
            # Update Chart.yaml
            export PJ_VER=${{ env.BUILD_TAG }}
            [[ `echo ${{ env.RELEASE_NAME }} | cut -d '-' -f 1` == "${{ env.DEPLOY_ENV }}" ]] && export CHART_NAME=`echo ${{ env.RELEASE_NAME }} | cut -d '-' -f2-` || export CHART_NAME=${{ env.RELEASE_NAME }};
            yq eval --inplace '.appVersion = strenv(PJ_VER) | .name = strenv(CHART_NAME)' helm-charts/Chart.yaml

            # Helm upgrade command
            HELM_CMD="helm upgrade --install ${{ env.RELEASE_NAME }} ./helm-charts \
              --namespace ${{ env.NAMESPACE }} \
              --create-namespace \
              --set image.registry=${{ env.REGISTRY }} \
              --set image.repository=${{ env.IMAGE_NAME }} \
              --set image.tag=${{ env.BUILD_TAG }} \
              --set environment=${{ env.DEPLOY_ENV }}"

            # Add SSM parameters as --set flags
            if [ "$(echo "$SSM_PARAMS" | jq 'length')" -ne "0" ]; then
              echo "Adding SSM parameters to Helm command"
              while IFS= read -r param; do
                key=$(echo "$param" | jq -r '.Name | split("/") | last')
                value=$(echo "$param" | jq -r '.Value')
                # Escape special characters in the value
                escaped_value=$(printf '%q' "$value")
                HELM_CMD="$HELM_CMD --set $key=$escaped_value"
              done < <(echo "$SSM_PARAMS" | jq -c '.[]')
            else
              echo "No parameters found in SSM Parameter Store"
            fi

            echo "Final Helm command:"
            echo $HELM_CMD

            eval $HELM_CMD

            # Wait for deployment to complete
            kubectl rollout status deployment/${{ env.RELEASE_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s

          else
            echo "::error::Invalid DEPLOY_TARGET: ${{ vars.DEPLOY_TARGET }}"
            exit 1
          fi
          echo "deploy_result=success" >> $GITHUB_OUTPUT

      - name: Update deploy result
        run: echo "deploy_result=${{ steps.deploy_step.outputs.deploy_result }}" >> $GITHUB_OUTPUT

  scan-issue:
    needs: [build]
    env:
      SCAN_SUCCESS: ${{ needs.build.outputs.scan_success }}
    runs-on: ${{ vars.RUNNER_NAME || 'ubuntu-latest' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download deploy files
        id: download
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: trivy-result
          path: ./

      - name: Check Trivy Result and Create/Update Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER=$(gh issue list --search "Container Scan Failed" --json number --jq '.[0].number')
          if [ -s trivy.txt ] && [ "${{ env.SCAN_SUCCESS }}" == "true" ] && grep -q "Total: [1-9][0-9]*" trivy.txt; then
            echo "Vulnerability Scan failed. Creating or updating an issue..."
            gh label create vulnerability --description "Code Scan Issue" --color C13B4F --force
            COMMENT_BODY=$(cat << EOF
          **Container Scan Results**

          🚨 Scan failed for commit \`${GITHUB_SHA:0:7}\` (Run #${GITHUB_RUN_NUMBER})

          ### Scan Details
          <details>
          <summary>Click to expand detailed results</summary>

          \`\`\`
          $(cat ./trivy.txt)
          \`\`\`
          </details>

          ---
          *This comment was automatically generated by the Container Scan workflow.*
          EOF
          )
            if [ -z "$ISSUE_NUMBER" ]; then
              echo "Creating a new issue..."
              gh issue create \
                --assignee ${{ github.actor }} \
                --title "Container Scan Failed" \
                --body "$COMMENT_BODY" \
                --label "vulnerability" >> $GITHUB_STEP_SUMMARY
              echo "Created new issue"
            else
              echo "Updating existing issue #$ISSUE_NUMBER..."
              gh issue edit $ISSUE_NUMBER --add-assignee ${{ github.actor }}
              gh issue comment $ISSUE_NUMBER --body "$COMMENT_BODY" >> $GITHUB_STEP_SUMMARY
              echo "Updated issue #$ISSUE_NUMBER"
            fi
          elif [ -n "$ISSUE_NUMBER" ] && [ "${{ env.SCAN_SUCCESS }}" == "true" ]; then
            echo "Container Scan passed. Closing existing issue..."
            gh issue close $ISSUE_NUMBER --comment "Container Scan passed for commit ${GITHUB_SHA:0:7} (Run #${GITHUB_RUN_NUMBER})." >> $GITHUB_STEP_SUMMARY
            echo "Closed issue #$ISSUE_NUMBER"
          elif [ "${{ env.SCAN_SUCCESS }}" == "false" ]; then
            echo "Container Scan failed after multiple retries due to some unknown reason." >> $GITHUB_STEP_SUMMARY
          else
            echo "Container Scan passed. No existing issue to close." >> $GITHUB_STEP_SUMMARY
          fi

  pull-request:
    if: always()
    needs: [deploy]
    runs-on: ${{ vars.RUNNER_NAME || 'ubuntu-latest' }}
    outputs:
      pr_created: ${{ steps.create_pr.outputs.pr_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.BOT_TOKEN }}

      - name: Determine base and source branches
        id: determine_branches
        env:
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          
          case "${GITHUB_REF}" in
            refs/heads/develop)
              echo "base_branch=staging" >> $GITHUB_OUTPUT
              echo "source_branch=develop" >> $GITHUB_OUTPUT
              echo "create_pr=true" >> $GITHUB_OUTPUT
              ;;
            refs/tags/v*.*.*-beta)
              echo "Skipping PR creation for beta tag" >> $GITHUB_STEP_SUMMARY
              exit 0
              ;;
            refs/tags/v*.*.* | refs/heads/${DEFAULT_BRANCH})
              echo "Skipping PR creation for release tag or default branch" >> $GITHUB_STEP_SUMMARY
              exit 0
              ;;
            *)
              echo "::error::Unsupported branch/tag format: ${GITHUB_REF}"
              exit 1
              ;;
          esac

      - name: Create or update pull request
        id: create_pr
        if: steps.determine_branches.outputs.create_pr == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          base_branch="${{ steps.determine_branches.outputs.base_branch }}"
          source_branch="${{ steps.determine_branches.outputs.source_branch }}"
          pr_title="${{ github.ref_name }} to ${base_branch}"
          
          # Check if there are any commits between the branches
          commit_count=$(git rev-list --count origin/$base_branch..origin/$source_branch)
          
          if [ "$commit_count" -eq "0" ]; then
            echo "No new commits between $base_branch and $source_branch. Skipping PR creation." | tee -a $GITHUB_STEP_SUMMARY
            echo "pr_created=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          existing_pr=$(gh pr list --base "$base_branch" --head "$source_branch" --json number --jq '.[0].number')
          
          if [ -z "$existing_pr" ]; then
            echo "Creating a new pull request..."
            gh pr create \
              --base "$base_branch" \
              --head "$source_branch" \
              --title "$pr_title" \
              --body "This pull request is automatically created for the branch ${{ github.ref_name }}." \
              --assignee "${{ github.actor }}" \
              --reviewer "${{ env.PR_REVIEWERS }}" >> $GITHUB_STEP_SUMMARY || echo "Failed to create PR, but continuing workflow"
            echo "pr_created=true" >> $GITHUB_OUTPUT
            echo "Created"
          else
            echo "Updating existing pull request #$existing_pr..."
            gh pr edit "$existing_pr" --add-assignee "${{ github.actor }}" >> $GITHUB_STEP_SUMMARY || echo "Failed to update PR, but continuing workflow"
            echo "pr_created=false" >> $GITHUB_OUTPUT
            echo "Updated"
          fi
