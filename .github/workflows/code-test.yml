name: Reusable workflow for code test

on:
  workflow_call:
    secrets:
      BOT_TOKEN:
        required: true

jobs:
  trivy-scan:
    if: github.event_name == 'pull_request' && github.base_ref == github.event.repository.default_branch
    runs-on: ${{ vars.RUNNER_NAME || 'ubuntu-latest' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.BOT_TOKEN }}

      - name: Run Trivy vulnerability scanner in repo mode
        id: scan
        continue-on-error: true
        run: |
          # Install Trivy directly
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin ${{ vars.TRIVY_VERSION || 'v0.57.0' }}

          # Configure Trivy
          export TRIVY_USERNAME=${{ github.repository_owner }}
          export TRIVY_PASSWORD=${{ secrets.BOT_TOKEN }}
          export GITHUB_TOKEN=${{ secrets.BOT_TOKEN }}

          # Try multiple times with exponential backoff
          for i in {1..5}; do
            echo "Attempt $i to run Trivy scan..."
            
            if trivy fs \
              --cache-dir .trivy-cache \
              --format table \
              --ignore-unfixed \
              --output trivy.txt \
              --severity HIGH,CRITICAL \
              .; then
              echo "✅ Trivy scan completed successfully"
              echo "scan_success=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "❌ Attempt $i failed. Waiting before retry..."
              sleep $((2 ** (i - 1))) # 1s, 2s, 4s, 8s, 16s
            fi
          done

          echo "All retry attempts failed"
          echo "scan_success=false" >> $GITHUB_OUTPUT
          exit 1

      - name: Validate Trivy output
        id: validate_trivy
        run: |
          if [ ! -s trivy.txt ]; then
            echo "Trivy output file is empty or does not exist."
            echo "scan_valid=false" >> $GITHUB_OUTPUT
          elif grep -q "error" trivy.txt; then
            echo "Trivy scan encountered an error:"
            cat trivy.txt
            echo "scan_valid=false" >> $GITHUB_OUTPUT
          else
            echo "Trivy scan completed successfully."
            echo "scan_valid=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish Trivy Output to Summary
        if: steps.validate_trivy.outputs.scan_valid == 'true'
        run: |
          if [[ -s trivy.txt ]]; then
            cat trivy.txt;
            {
              echo "### Code Scan Output"
              echo "<details><summary>Click to expand</summary>"
              echo ""
              echo '```Result'
              cat trivy.txt
              echo '```'
              echo "</details>"
            } >> $GITHUB_STEP_SUMMARY
          fi

      - name: Archive Trivy Result
        if: steps.validate_trivy.outputs.scan_valid == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-result
          path: trivy.txt

      - name: Check Trivy Result and Create/Update Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SCAN_SUCCESS: ${{ steps.scan.outputs.scan_success }}
        run: |
          ISSUE_NUMBER=$(gh issue list --search "Code Dependency Scan Failed" --json number --jq '.[0].number')
          if [ -s trivy.txt ] && [ "${{ env.SCAN_SUCCESS }}" == "true" ] && grep -q "Total: [1-9][0-9]*" trivy.txt; then
            echo "Code Dependency Scan failed. Creating or updating an issue..."
            gh label create vulnerability --description "Code Scan Issue" --color C13B4F --force
            COMMENT_BODY=$(cat << EOF
          **Code Dependency Scan Results**

          🚨 Scan failed for commit \`${GITHUB_SHA:0:7}\` (Run #${GITHUB_RUN_NUMBER})

          ### Scan Details
          <details>
          <summary>Click to expand detailed results</summary>

          \`\`\`
          $(cat ./trivy.txt)
          \`\`\`
          </details>

          ---
          *This comment was automatically generated by the Code Dependency Scan workflow.*
          EOF
          )
            if [ -z "$ISSUE_NUMBER" ]; then
              echo "Creating a new issue..."
              gh issue create \
                --assignee ${{ github.actor }} \
                --title "Code Dependency Scan Failed" \
                --body "$COMMENT_BODY" \
                --label "vulnerability" >> $GITHUB_STEP_SUMMARY
              echo "Created new issue"
            else
              echo "Updating existing issue #$ISSUE_NUMBER..."
              gh issue edit $ISSUE_NUMBER --add-assignee ${{ github.actor }}
              gh issue comment $ISSUE_NUMBER --body "$COMMENT_BODY" >> $GITHUB_STEP_SUMMARY
              echo "Updated issue #$ISSUE_NUMBER"
            fi
            if [ ${{ github.event_name }} == 'pull_request' ]; then
              gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"
            fi
            exit 1
          elif [ -n "$ISSUE_NUMBER" ] && [ "${{ env.SCAN_SUCCESS }}" == "true" ]; then
            echo "Code Dependency Scan passed. Closing existing issue..."
            gh issue close $ISSUE_NUMBER --comment "Code Dependency Scan passed for commit ${GITHUB_SHA:0:7} (Run #${GITHUB_RUN_NUMBER})." >> $GITHUB_STEP_SUMMARY
            echo "Closed issue #$ISSUE_NUMBER"
          elif [ "${{ env.SCAN_SUCCESS }}" == "false" ]; then
            echo "Code Dependency Scan failed after multiple retries due to some unknown reason." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "Code Dependency Scan passed. No existing issue to close." >> $GITHUB_STEP_SUMMARY
          fi
          if [ ${{ github.event_name }} == 'pull_request' ]; then
            gh pr comment ${{ github.event.pull_request.number }} --body "Code Dependency Scan passed for commit ${GITHUB_SHA:0:7} (Run #${GITHUB_RUN_NUMBER})."
          fi